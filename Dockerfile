# Etapa 1: Build con Maven (Amazon Corretto 17)
FROM maven:3.9.11-amazoncorretto-17-alpine AS build

WORKDIR /app

# Copiar pom.xml para cachear dependencias
COPY pom.xml .

RUN mvn dependency:go-offline

# Copiar el c√≥digo fuente
COPY src ./src

# Compilar y empaquetar el proyecto
RUN mvn clean package -DskipTests

# Etapa 2: Runtime con Java 17 Alpine
FROM openjdk:17-alpine

WORKDIR /app

# Copiar el JAR compilado desde la etapa de build
COPY --from=build /app/target/*.jar app.jar

# Definir variables de entorno para Spring Boot
ARG KAFKA_BOOTSTRAP_ADDRESS
ARG KAFKA_TOPIC_NAME
ARG SYNC_MANAGER_URL
ARG KAFKA_REQUEST_TOPIC_NAME
ARG KAFKA_RESPONSE_TOPIC_NAME
ARG KAFKA_BOOTSTRAP_ADDRESS
ARG MQTT_BROKER
ARG MQTT_CLIENT_ID
ARG MQTT_USERNAME
ARG MQTT_PASSWORD
ARG MQTT_REQUEST_TOPIC_NAME
ARG MQTT_RESPONSE_TOPIC_NAME

ENV KAFKA_BOOTSTRAP_ADDRESS=${KAFKA_BOOTSTRAP_ADDRESS}
ENV KAFKA_TOPIC_NAME=${KAFKA_TOPIC_NAME}
ENV SYNC_MANAGER_URL=${SYNC_MANAGER_URL}
ENV KAFKA_REQUEST_TOPIC_NAME=${KAFKA_REQUEST_TOPIC_NAME}
ENV KAFKA_RESPONSE_TOPIC_NAME=${KAFKA_RESPONSE_TOPIC_NAME}
ENV KAFKA_BOOTSTRAP_ADDRESS=${KAFKA_BOOTSTRAP_ADDRESS}
ENV MQTT_BROKER=${MQTT_BROKER}
ENV MQTT_CLIENT_ID=${MQTT_CLIENT_ID}
ENV MQTT_USERNAME=${MQTT_USERNAME}
ENV MQTT_PASSWORD=${MQTT_PASSWORD}
ENV MQTT_REQUEST_TOPIC_NAME=${MQTT_REQUEST_TOPIC_NAME}
ENV MQTT_RESPONSE_TOPIC_NAME=${MQTT_RESPONSE_TOPIC_NAME}

EXPOSE 8084

ENTRYPOINT ["java", "-jar", "app.jar"]